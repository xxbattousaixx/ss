{"ast":null,"code":"/**\n * Simple underwater shader\n *\n\n parameters:\n tDiffuse: texture\n time: this should increase with time passing\n distort_speed: how fast you want the distortion effect of water to proceed\n distortion: to what degree will the shader distort the screen\n centerX: the distortion center X coord\n centerY: the distortion center Y coord\n\n explaination:\n the shader is quite simple\n it chooses a center and start from there make pixels around it to \"swell\" then \"shrink\" then \"swell\"...\n this is of course nothing really similar to underwater scene\n but you can combine several this shaders together to create the effect you need...\n And yes, this shader could be used for something other than underwater effect, for example, magnifier effect :)\n\n * @author vergil Wang\n */\nimport { Mesh, OrthographicCamera, PlaneBufferGeometry, Scene, ShaderMaterial, UniformsUtils, Vector2 } from 'three';\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass';\nvar WaterShader = {\n  uniforms: {\n    byp: {\n      value: 0\n    },\n    //apply the glitch ?\n    texture: {\n      type: 't',\n      value: null\n    },\n    time: {\n      type: 'f',\n      value: 0.0\n    },\n    factor: {\n      type: 'f',\n      value: 0.0\n    },\n    resolution: {\n      type: 'v2',\n      value: null\n    }\n  },\n  vertexShader: `varying vec2 vUv;\n    void main(){\n      vUv = uv;\n      vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n      gl_Position = projectionMatrix * modelViewPosition;\n    }`,\n  fragmentShader: `uniform int byp; //should we apply the glitch ?\n    uniform float time;\n    uniform float factor;\n    uniform vec2 resolution;\n    uniform sampler2D texture;\n\n    varying vec2 vUv;\n\n    void main() {\n      if (byp<1) {\n        vec2 uv1 = vUv;\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\n        float frequency = 6.0;\n        float amplitude = 0.015 * factor;\n        float x = uv1.y * frequency + time * .7;\n        float y = uv1.x * frequency + time * .3;\n        uv1.x += cos(x+y) * amplitude * cos(y);\n        uv1.y += sin(x-y) * amplitude * cos(y);\n        vec4 rgba = texture2D(texture, uv1);\n        gl_FragColor = rgba;\n      } else {\n        gl_FragColor = texture2D(texture, vUv);\n      }\n    }`\n};\n\nvar WaterPass = function (dt_size) {\n  Pass.call(this);\n  if (WaterShader === undefined) console.error('THREE.WaterPass relies on THREE.WaterShader');\n  var shader = WaterShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  if (dt_size === undefined) dt_size = 64;\n  this.uniforms['resolution'].value = new Vector2(dt_size, dt_size);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new Scene();\n  this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n  this.factor = 0;\n  this.time = 0;\n};\n\nWaterPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: WaterPass,\n  render: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    const factor = Math.max(0, this.factor);\n    this.uniforms['byp'].value = factor ? 0 : 1;\n    this.uniforms['texture'].value = readBuffer.texture;\n    this.uniforms['time'].value = this.time;\n    this.uniforms['factor'].value = this.factor;\n    this.time += 0.05;\n    this.quad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      renderer.render(this.scene, this.camera);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n    }\n  }\n});\nexport { WaterPass };","map":{"version":3,"sources":["/Users/dc7/Desktop/SS/src/views/Waterpass.js"],"names":["Mesh","OrthographicCamera","PlaneBufferGeometry","Scene","ShaderMaterial","UniformsUtils","Vector2","Pass","WaterShader","uniforms","byp","value","texture","type","time","factor","resolution","vertexShader","fragmentShader","WaterPass","dt_size","call","undefined","console","error","shader","clone","material","camera","scene","quad","frustumCulled","add","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","Math","max","renderToScreen","setRenderTarget","clear"],"mappings":"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","sourcesContent":["/**\n * Simple underwater shader\n *\n\n parameters:\n tDiffuse: texture\n time: this should increase with time passing\n distort_speed: how fast you want the distortion effect of water to proceed\n distortion: to what degree will the shader distort the screen\n centerX: the distortion center X coord\n centerY: the distortion center Y coord\n\n explaination:\n the shader is quite simple\n it chooses a center and start from there make pixels around it to \"swell\" then \"shrink\" then \"swell\"...\n this is of course nothing really similar to underwater scene\n but you can combine several this shaders together to create the effect you need...\n And yes, this shader could be used for something other than underwater effect, for example, magnifier effect :)\n\n * @author vergil Wang\n */\n\nimport { Mesh, OrthographicCamera, PlaneBufferGeometry, Scene, ShaderMaterial, UniformsUtils, Vector2 } from 'three'\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass'\n\nvar WaterShader = {\n  uniforms: {\n    byp: { value: 0 }, //apply the glitch ?\n    texture: { type: 't', value: null },\n    time: { type: 'f', value: 0.0 },\n    factor: { type: 'f', value: 0.0 },\n    resolution: { type: 'v2', value: null }\n  },\n\n  vertexShader: `varying vec2 vUv;\n    void main(){\n      vUv = uv;\n      vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n      gl_Position = projectionMatrix * modelViewPosition;\n    }`,\n\n  fragmentShader: `uniform int byp; //should we apply the glitch ?\n    uniform float time;\n    uniform float factor;\n    uniform vec2 resolution;\n    uniform sampler2D texture;\n\n    varying vec2 vUv;\n\n    void main() {\n      if (byp<1) {\n        vec2 uv1 = vUv;\n        vec2 uv = gl_FragCoord.xy/resolution.xy;\n        float frequency = 6.0;\n        float amplitude = 0.015 * factor;\n        float x = uv1.y * frequency + time * .7;\n        float y = uv1.x * frequency + time * .3;\n        uv1.x += cos(x+y) * amplitude * cos(y);\n        uv1.y += sin(x-y) * amplitude * cos(y);\n        vec4 rgba = texture2D(texture, uv1);\n        gl_FragColor = rgba;\n      } else {\n        gl_FragColor = texture2D(texture, vUv);\n      }\n    }`\n}\n\nvar WaterPass = function(dt_size) {\n  Pass.call(this)\n  if (WaterShader === undefined) console.error('THREE.WaterPass relies on THREE.WaterShader')\n  var shader = WaterShader\n  this.uniforms = UniformsUtils.clone(shader.uniforms)\n  if (dt_size === undefined) dt_size = 64\n  this.uniforms['resolution'].value = new Vector2(dt_size, dt_size)\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  })\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1)\n  this.scene = new Scene()\n  this.quad = new Mesh(new PlaneBufferGeometry(2, 2), null)\n  this.quad.frustumCulled = false // Avoid getting clipped\n  this.scene.add(this.quad)\n  this.factor = 0\n  this.time = 0\n}\n\nWaterPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: WaterPass,\n\n  render: function(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    const factor = Math.max(0, this.factor)\n    this.uniforms['byp'].value = factor ? 0 : 1\n    this.uniforms['texture'].value = readBuffer.texture\n    this.uniforms['time'].value = this.time\n    this.uniforms['factor'].value = this.factor\n    this.time += 0.05\n    this.quad.material = this.material\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null)\n      renderer.render(this.scene, this.camera)\n    } else {\n      renderer.setRenderTarget(writeBuffer)\n      if (this.clear) renderer.clear()\n      renderer.render(this.scene, this.camera)\n    }\n  }\n})\n\nexport { WaterPass }\n"]},"metadata":{},"sourceType":"module"}