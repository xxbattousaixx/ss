{"ast":null,"code":"import { AddEquation, Color, CustomBlending, DataTexture, DepthTexture, DstAlphaFactor, DstColorFactor, FloatType, LinearFilter, MathUtils, MeshNormalMaterial, NearestFilter, NoBlending, RGBAFormat, RepeatWrapping, ShaderMaterial, UniformsUtils, UnsignedShortType, Vector3, WebGLRenderTarget, ZeroFactor } from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader } from \"../shaders/SSAOShader.js\";\nimport { SSAOBlurShader } from \"../shaders/SSAOShader.js\";\nimport { SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\n\nvar SSAOPass = function (scene, camera, width, height) {\n  Pass.call(this);\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.camera = camera;\n  this.scene = scene;\n  this.kernelRadius = 8;\n  this.kernelSize = 32;\n  this.kernel = [];\n  this.noiseTexture = null;\n  this.output = 0;\n  this.minDistance = 0.005;\n  this.maxDistance = 0.1; //\n\n  this.generateSampleKernel();\n  this.generateRandomKernelRotations(); // beauty render target with depth buffer\n\n  var depthTexture = new DepthTexture();\n  depthTexture.type = UnsignedShortType;\n  depthTexture.minFilter = NearestFilter;\n  depthTexture.maxFilter = NearestFilter;\n  this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat,\n    depthTexture: depthTexture,\n    depthBuffer: true\n  }); // normal render target\n\n  this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  }); // ssao render target\n\n  this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n  if (SSAOShader === undefined) {\n    console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n  }\n\n  this.ssaoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOShader.defines),\n    uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n    vertexShader: SSAOShader.vertexShader,\n    fragmentShader: SSAOShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n  this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n  this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n  this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.getInverse(this.camera.projectionMatrix); // normal material\n\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending; // blur material\n\n  this.blurMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n    vertexShader: SSAOBlurShader.vertexShader,\n    fragmentShader: SSAOBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n  this.depthRenderMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAODepthShader.defines),\n    uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n    vertexShader: SSAODepthShader.vertexShader,\n    fragmentShader: SSAODepthShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: DstColorFactor,\n    blendDst: ZeroFactor,\n    blendEquation: AddEquation,\n    blendSrcAlpha: DstAlphaFactor,\n    blendDstAlpha: ZeroFactor,\n    blendEquationAlpha: AddEquation\n  });\n  this.fsQuad = new Pass.FullScreenQuad(null);\n  this.originalClearColor = new Color();\n};\n\nSSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SSAOPass,\n  dispose: function () {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function (renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    // render beauty and depth\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals\n\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  },\n  renderPass: function (renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    this.originalClearColor.copy(renderer.getClearColor());\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor());\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function (width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.getInverse(this.camera.projectionMatrix);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  },\n  generateSampleKernel: function () {\n    var kernelSize = this.kernelSize;\n    var kernel = this.kernel;\n\n    for (var i = 0; i < kernelSize; i++) {\n      var sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      var scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  },\n  generateRandomKernelRotations: function () {\n    var width = 4,\n        height = 4;\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n\n    var simplex = new SimplexNoise();\n    var size = width * height;\n    var data = new Float32Array(size * 4);\n\n    for (var i = 0; i < size; i++) {\n      var stride = i * 4;\n      var x = Math.random() * 2 - 1;\n      var y = Math.random() * 2 - 1;\n      var z = 0;\n      var noise = simplex.noise3d(x, y, z);\n      data[stride] = noise;\n      data[stride + 1] = noise;\n      data[stride + 2] = noise;\n      data[stride + 3] = 1;\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RGBAFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n  }\n});\nSSAOPass.OUTPUT = {\n  'Default': 0,\n  'SSAO': 1,\n  'Blur': 2,\n  'Beauty': 3,\n  'Depth': 4,\n  'Normal': 5\n};\nexport { SSAOPass };","map":{"version":3,"sources":["/Users/dc7/Desktop/SS/node_modules/three/examples/jsm/postprocessing/SSAOPass.js"],"names":["AddEquation","Color","CustomBlending","DataTexture","DepthTexture","DstAlphaFactor","DstColorFactor","FloatType","LinearFilter","MathUtils","MeshNormalMaterial","NearestFilter","NoBlending","RGBAFormat","RepeatWrapping","ShaderMaterial","UniformsUtils","UnsignedShortType","Vector3","WebGLRenderTarget","ZeroFactor","Pass","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","SSAOPass","scene","camera","width","height","call","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","generateSampleKernel","generateRandomKernelRotations","depthTexture","type","minFilter","maxFilter","beautyRenderTarget","magFilter","format","depthBuffer","normalRenderTarget","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","value","texture","near","far","set","copy","projectionMatrix","getInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","FullScreenQuad","originalClearColor","prototype","create","constructor","dispose","render","renderer","writeBuffer","setRenderTarget","renderOverride","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","stride","noise","noise3d","wrapS","wrapT"],"mappings":"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","sourcesContent":["import {\n\tAddEquation,\n\tColor,\n\tCustomBlending,\n\tDataTexture,\n\tDepthTexture,\n\tDstAlphaFactor,\n\tDstColorFactor,\n\tFloatType,\n\tLinearFilter,\n\tMathUtils,\n\tMeshNormalMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tRGBAFormat,\n\tRepeatWrapping,\n\tShaderMaterial,\n\tUniformsUtils,\n\tUnsignedShortType,\n\tVector3,\n\tWebGLRenderTarget,\n\tZeroFactor\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader } from \"../shaders/SSAOShader.js\";\nimport { SSAOBlurShader } from \"../shaders/SSAOShader.js\";\nimport { SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\n\nvar SSAOPass = function ( scene, camera, width, height ) {\n\n\tPass.call( this );\n\n\tthis.width = ( width !== undefined ) ? width : 512;\n\tthis.height = ( height !== undefined ) ? height : 512;\n\n\tthis.clear = true;\n\n\tthis.camera = camera;\n\tthis.scene = scene;\n\n\tthis.kernelRadius = 8;\n\tthis.kernelSize = 32;\n\tthis.kernel = [];\n\tthis.noiseTexture = null;\n\tthis.output = 0;\n\n\tthis.minDistance = 0.005;\n\tthis.maxDistance = 0.1;\n\n\t//\n\n\tthis.generateSampleKernel();\n\tthis.generateRandomKernelRotations();\n\n\t// beauty render target with depth buffer\n\n\tvar depthTexture = new DepthTexture();\n\tdepthTexture.type = UnsignedShortType;\n\tdepthTexture.minFilter = NearestFilter;\n\tdepthTexture.maxFilter = NearestFilter;\n\n\tthis.beautyRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\tminFilter: LinearFilter,\n\t\tmagFilter: LinearFilter,\n\t\tformat: RGBAFormat,\n\t\tdepthTexture: depthTexture,\n\t\tdepthBuffer: true\n\t} );\n\n\t// normal render target\n\n\tthis.normalRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\tminFilter: NearestFilter,\n\t\tmagFilter: NearestFilter,\n\t\tformat: RGBAFormat\n\t} );\n\n\t// ssao render target\n\n\tthis.ssaoRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\tminFilter: LinearFilter,\n\t\tmagFilter: LinearFilter,\n\t\tformat: RGBAFormat\n\t} );\n\n\tthis.blurRenderTarget = this.ssaoRenderTarget.clone();\n\n\t// ssao material\n\n\tif ( SSAOShader === undefined ) {\n\n\t\tconsole.error( 'THREE.SSAOPass: The pass relies on SSAOShader.' );\n\n\t}\n\n\tthis.ssaoMaterial = new ShaderMaterial( {\n\t\tdefines: Object.assign( {}, SSAOShader.defines ),\n\t\tuniforms: UniformsUtils.clone( SSAOShader.uniforms ),\n\t\tvertexShader: SSAOShader.vertexShader,\n\t\tfragmentShader: SSAOShader.fragmentShader,\n\t\tblending: NoBlending\n\t} );\n\n\tthis.ssaoMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\tthis.ssaoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\tthis.ssaoMaterial.uniforms[ 'tDepth' ].value = this.beautyRenderTarget.depthTexture;\n\tthis.ssaoMaterial.uniforms[ 'tNoise' ].value = this.noiseTexture;\n\tthis.ssaoMaterial.uniforms[ 'kernel' ].value = this.kernel;\n\tthis.ssaoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\tthis.ssaoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.getInverse( this.camera.projectionMatrix );\n\n\t// normal material\n\n\tthis.normalMaterial = new MeshNormalMaterial();\n\tthis.normalMaterial.blending = NoBlending;\n\n\t// blur material\n\n\tthis.blurMaterial = new ShaderMaterial( {\n\t\tdefines: Object.assign( {}, SSAOBlurShader.defines ),\n\t\tuniforms: UniformsUtils.clone( SSAOBlurShader.uniforms ),\n\t\tvertexShader: SSAOBlurShader.vertexShader,\n\t\tfragmentShader: SSAOBlurShader.fragmentShader\n\t} );\n\tthis.blurMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\n\t// material for rendering the depth\n\n\tthis.depthRenderMaterial = new ShaderMaterial( {\n\t\tdefines: Object.assign( {}, SSAODepthShader.defines ),\n\t\tuniforms: UniformsUtils.clone( SSAODepthShader.uniforms ),\n\t\tvertexShader: SSAODepthShader.vertexShader,\n\t\tfragmentShader: SSAODepthShader.fragmentShader,\n\t\tblending: NoBlending\n\t} );\n\tthis.depthRenderMaterial.uniforms[ 'tDepth' ].value = this.beautyRenderTarget.depthTexture;\n\tthis.depthRenderMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\tthis.depthRenderMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\n\t// material for rendering the content of a render target\n\n\tthis.copyMaterial = new ShaderMaterial( {\n\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\tvertexShader: CopyShader.vertexShader,\n\t\tfragmentShader: CopyShader.fragmentShader,\n\t\ttransparent: true,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\tblendSrc: DstColorFactor,\n\t\tblendDst: ZeroFactor,\n\t\tblendEquation: AddEquation,\n\t\tblendSrcAlpha: DstAlphaFactor,\n\t\tblendDstAlpha: ZeroFactor,\n\t\tblendEquationAlpha: AddEquation\n\t} );\n\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\n\n\tthis.originalClearColor = new Color();\n\n};\n\nSSAOPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: SSAOPass,\n\n\tdispose: function () {\n\n\t\t// dispose render targets\n\n\t\tthis.beautyRenderTarget.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\t\tthis.ssaoRenderTarget.dispose();\n\t\tthis.blurRenderTarget.dispose();\n\n\t\t// dispose materials\n\n\t\tthis.normalMaterial.dispose();\n\t\tthis.blurMaterial.dispose();\n\t\tthis.copyMaterial.dispose();\n\t\tthis.depthRenderMaterial.dispose();\n\n\t\t// dipsose full screen quad\n\n\t\tthis.fsQuad.dispose();\n\n\t},\n\n\trender: function ( renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */ ) {\n\n\t\t// render beauty and depth\n\n\t\trenderer.setRenderTarget( this.beautyRenderTarget );\n\t\trenderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// render normals\n\n\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\n\t\t// render SSAO\n\n\t\tthis.ssaoMaterial.uniforms[ 'kernelRadius' ].value = this.kernelRadius;\n\t\tthis.ssaoMaterial.uniforms[ 'minDistance' ].value = this.minDistance;\n\t\tthis.ssaoMaterial.uniforms[ 'maxDistance' ].value = this.maxDistance;\n\t\tthis.renderPass( renderer, this.ssaoMaterial, this.ssaoRenderTarget );\n\n\t\t// render blur\n\n\t\tthis.renderPass( renderer, this.blurMaterial, this.blurRenderTarget );\n\n\t\t// output result to screen\n\n\t\tswitch ( this.output ) {\n\n\t\t\tcase SSAOPass.OUTPUT.SSAO:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Blur:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Beauty:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Depth:\n\n\t\t\t\tthis.renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Normal:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Default:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = CustomBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.SSAOPass: Unknown output type.' );\n\n\t\t}\n\n\t},\n\n\trenderPass: function ( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\tthis.originalClearColor.copy( renderer.getClearColor() );\n\t\tvar originalClearAlpha = renderer.getClearAlpha();\n\t\tvar originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.fsQuad.material = passMaterial;\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t},\n\n\trenderOverride: function ( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\tthis.originalClearColor.copy( renderer.getClearColor() );\n\t\tvar originalClearAlpha = renderer.getClearAlpha();\n\t\tvar originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\t// restore original state\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.beautyRenderTarget.setSize( width, height );\n\t\tthis.ssaoRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\t\tthis.blurRenderTarget.setSize( width, height );\n\n\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.getInverse( this.camera.projectionMatrix );\n\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\n\t},\n\n\tgenerateSampleKernel: function () {\n\n\t\tvar kernelSize = this.kernelSize;\n\t\tvar kernel = this.kernel;\n\n\t\tfor ( var i = 0; i < kernelSize; i ++ ) {\n\n\t\t\tvar sample = new Vector3();\n\t\t\tsample.x = ( Math.random() * 2 ) - 1;\n\t\t\tsample.y = ( Math.random() * 2 ) - 1;\n\t\t\tsample.z = Math.random();\n\n\t\t\tsample.normalize();\n\n\t\t\tvar scale = i / kernelSize;\n\t\t\tscale = MathUtils.lerp( 0.1, 1, scale * scale );\n\t\t\tsample.multiplyScalar( scale );\n\n\t\t\tkernel.push( sample );\n\n\t\t}\n\n\t},\n\n\tgenerateRandomKernelRotations: function () {\n\n\t\tvar width = 4, height = 4;\n\n\t\tif ( SimplexNoise === undefined ) {\n\n\t\t\tconsole.error( 'THREE.SSAOPass: The pass relies on SimplexNoise.' );\n\n\t\t}\n\n\t\tvar simplex = new SimplexNoise();\n\n\t\tvar size = width * height;\n\t\tvar data = new Float32Array( size * 4 );\n\n\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\tvar stride = i * 4;\n\n\t\t\tvar x = ( Math.random() * 2 ) - 1;\n\t\t\tvar y = ( Math.random() * 2 ) - 1;\n\t\t\tvar z = 0;\n\n\t\t\tvar noise = simplex.noise3d( x, y, z );\n\n\t\t\tdata[ stride ] = noise;\n\t\t\tdata[ stride + 1 ] = noise;\n\t\t\tdata[ stride + 2 ] = noise;\n\t\t\tdata[ stride + 3 ] = 1;\n\n\t\t}\n\n\t\tthis.noiseTexture = new DataTexture( data, width, height, RGBAFormat, FloatType );\n\t\tthis.noiseTexture.wrapS = RepeatWrapping;\n\t\tthis.noiseTexture.wrapT = RepeatWrapping;\n\n\t}\n\n} );\n\nSSAOPass.OUTPUT = {\n\t'Default': 0,\n\t'SSAO': 1,\n\t'Blur': 2,\n\t'Beauty': 3,\n\t'Depth': 4,\n\t'Normal': 5\n};\n\nexport { SSAOPass };\n"]},"metadata":{},"sourceType":"module"}