{"ast":null,"code":"/**\n * Afterimage shader\n * I created this effect inspired by a demo on codepen:\n * https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&\n */\nvar AfterimageShader = {\n  uniforms: {\n    \"damp\": {\n      value: 0.96\n    },\n    \"tOld\": {\n      value: null\n    },\n    \"tNew\": {\n      value: null\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform float damp;\", \"uniform sampler2D tOld;\", \"uniform sampler2D tNew;\", \"varying vec2 vUv;\", \"vec4 when_gt( vec4 x, float y ) {\", \"\treturn max( sign( x - y ), 0.0 );\", \"}\", \"void main() {\", \"\tvec4 texelOld = texture2D( tOld, vUv );\", \"\tvec4 texelNew = texture2D( tNew, vUv );\", \"\ttexelOld *= damp * when_gt( texelOld, 0.1 );\", \"\tgl_FragColor = max(texelNew, texelOld);\", \"}\"].join(\"\\n\")\n};\nexport { AfterimageShader };","map":{"version":3,"sources":["/Users/dc7/Desktop/SS/node_modules/three/examples/jsm/shaders/AfterimageShader.js"],"names":["AfterimageShader","uniforms","value","vertexShader","join","fragmentShader"],"mappings":"AACA;;;;;AAMA,IAAIA,gBAAgB,GAAG;AAEtBC,EAAAA,QAAQ,EAAE;AAET,YAAQ;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAFC;AAGT,YAAQ;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAHC;AAIT,YAAQ;AAAEA,MAAAA,KAAK,EAAE;AAAT;AAJC,GAFY;AAUtBC,EAAAA,YAAY,EAAE,CAEb,mBAFa,EAIb,eAJa,EAMb,YANa,EAOb,4EAPa,EASb,GATa,EAWZC,IAXY,CAWN,IAXM,CAVQ;AAuBtBC,EAAAA,cAAc,EAAE,CAEf,qBAFe,EAIf,yBAJe,EAKf,yBALe,EAOf,mBAPe,EASf,mCATe,EAWf,oCAXe,EAaf,GAbe,EAef,eAfe,EAiBf,0CAjBe,EAkBf,0CAlBe,EAoBf,+CApBe,EAsBf,0CAtBe,EAwBf,GAxBe,EA0BdD,IA1Bc,CA0BR,IA1BQ;AAvBM,CAAvB;AAqDA,SAASJ,gBAAT","sourcesContent":["\n/**\n * Afterimage shader\n * I created this effect inspired by a demo on codepen:\n * https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&\n */\n\nvar AfterimageShader = {\n\n\tuniforms: {\n\n\t\t\"damp\": { value: 0.96 },\n\t\t\"tOld\": { value: null },\n\t\t\"tNew\": { value: null }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float damp;\",\n\n\t\t\"uniform sampler2D tOld;\",\n\t\t\"uniform sampler2D tNew;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"vec4 when_gt( vec4 x, float y ) {\",\n\n\t\t\"\treturn max( sign( x - y ), 0.0 );\",\n\n\t\t\"}\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texelOld = texture2D( tOld, vUv );\",\n\t\t\"\tvec4 texelNew = texture2D( tNew, vUv );\",\n\n\t\t\"\ttexelOld *= damp * when_gt( texelOld, 0.1 );\",\n\n\t\t\"\tgl_FragColor = max(texelNew, texelOld);\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { AfterimageShader };\n"]},"metadata":{},"sourceType":"module"}