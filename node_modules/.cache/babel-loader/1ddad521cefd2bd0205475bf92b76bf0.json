{"ast":null,"code":"import { AddEquation, Color, CustomBlending, DataTexture, DepthTexture, DstAlphaFactor, DstColorFactor, FloatType, LinearFilter, MathUtils, MeshNormalMaterial, NearestFilter, NoBlending, RGBAFormat, RepeatWrapping, ShaderMaterial, UniformsUtils, UnsignedShortType, Vector3, WebGLRenderTarget, ZeroFactor } from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader } from \"../shaders/SSAOShader.js\";\nimport { SSAOBlurShader } from \"../shaders/SSAOShader.js\";\nimport { SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\n\nvar SSAOPass = function SSAOPass(scene, camera, width, height) {\n  Pass.call(this);\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.camera = camera;\n  this.scene = scene;\n  this.kernelRadius = 8;\n  this.kernelSize = 32;\n  this.kernel = [];\n  this.noiseTexture = null;\n  this.output = 0;\n  this.minDistance = 0.005;\n  this.maxDistance = 0.1;\n  this._visibilityCache = new Map(); //\n\n  this.generateSampleKernel();\n  this.generateRandomKernelRotations(); // beauty render target\n\n  var depthTexture = new DepthTexture();\n  depthTexture.type = UnsignedShortType;\n  depthTexture.minFilter = NearestFilter;\n  depthTexture.maxFilter = NearestFilter;\n  this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  }); // normal render target with depth buffer\n\n  this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat,\n    depthTexture: depthTexture\n  }); // ssao render target\n\n  this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n  if (SSAOShader === undefined) {\n    console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n  }\n\n  this.ssaoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOShader.defines),\n    uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n    vertexShader: SSAOShader.vertexShader,\n    fragmentShader: SSAOShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n  this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n  this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending; // blur material\n\n  this.blurMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n    vertexShader: SSAOBlurShader.vertexShader,\n    fragmentShader: SSAOBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n  this.depthRenderMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAODepthShader.defines),\n    uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n    vertexShader: SSAODepthShader.vertexShader,\n    fragmentShader: SSAODepthShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: DstColorFactor,\n    blendDst: ZeroFactor,\n    blendEquation: AddEquation,\n    blendSrcAlpha: DstAlphaFactor,\n    blendDstAlpha: ZeroFactor,\n    blendEquationAlpha: AddEquation\n  });\n  this.fsQuad = new Pass.FullScreenQuad(null);\n  this.originalClearColor = new Color();\n};\n\nSSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SSAOPass,\n  dispose: function dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    // render beauty\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  },\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    this.originalClearColor.copy(renderer.getClearColor());\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor());\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  },\n  generateSampleKernel: function generateSampleKernel() {\n    var kernelSize = this.kernelSize;\n    var kernel = this.kernel;\n\n    for (var i = 0; i < kernelSize; i++) {\n      var sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      var scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  },\n  generateRandomKernelRotations: function generateRandomKernelRotations() {\n    var width = 4,\n        height = 4;\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n\n    var simplex = new SimplexNoise();\n    var size = width * height;\n    var data = new Float32Array(size * 4);\n\n    for (var i = 0; i < size; i++) {\n      var stride = i * 4;\n      var x = Math.random() * 2 - 1;\n      var y = Math.random() * 2 - 1;\n      var z = 0;\n      var noise = simplex.noise3d(x, y, z);\n      data[stride] = noise;\n      data[stride + 1] = noise;\n      data[stride + 2] = noise;\n      data[stride + 3] = 1;\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RGBAFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n  },\n  overrideVisibility: function overrideVisibility() {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  },\n  restoreVisibility: function restoreVisibility() {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      var visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n});\nSSAOPass.OUTPUT = {\n  'Default': 0,\n  'SSAO': 1,\n  'Blur': 2,\n  'Beauty': 3,\n  'Depth': 4,\n  'Normal': 5\n};\nexport { SSAOPass };","map":{"version":3,"sources":["/Users/dc7/Desktop/DAC/ss/node_modules/three/examples/jsm/postprocessing/SSAOPass.js"],"names":["AddEquation","Color","CustomBlending","DataTexture","DepthTexture","DstAlphaFactor","DstColorFactor","FloatType","LinearFilter","MathUtils","MeshNormalMaterial","NearestFilter","NoBlending","RGBAFormat","RepeatWrapping","ShaderMaterial","UniformsUtils","UnsignedShortType","Vector3","WebGLRenderTarget","ZeroFactor","Pass","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","SSAOPass","scene","camera","width","height","call","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","type","minFilter","maxFilter","beautyRenderTarget","magFilter","format","normalRenderTarget","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","FullScreenQuad","originalClearColor","prototype","create","constructor","dispose","render","renderer","writeBuffer","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","stride","noise","noise3d","wrapS","wrapT","cache","traverse","object","visible","isPoints","isLine","get"],"mappings":"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","sourcesContent":["import {\n\tAddEquation,\n\tColor,\n\tCustomBlending,\n\tDataTexture,\n\tDepthTexture,\n\tDstAlphaFactor,\n\tDstColorFactor,\n\tFloatType,\n\tLinearFilter,\n\tMathUtils,\n\tMeshNormalMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tRGBAFormat,\n\tRepeatWrapping,\n\tShaderMaterial,\n\tUniformsUtils,\n\tUnsignedShortType,\n\tVector3,\n\tWebGLRenderTarget,\n\tZeroFactor\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { SimplexNoise } from \"../math/SimplexNoise.js\";\nimport { SSAOShader } from \"../shaders/SSAOShader.js\";\nimport { SSAOBlurShader } from \"../shaders/SSAOShader.js\";\nimport { SSAODepthShader } from \"../shaders/SSAOShader.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\n\nvar SSAOPass = function ( scene, camera, width, height ) {\n\n\tPass.call( this );\n\n\tthis.width = ( width !== undefined ) ? width : 512;\n\tthis.height = ( height !== undefined ) ? height : 512;\n\n\tthis.clear = true;\n\n\tthis.camera = camera;\n\tthis.scene = scene;\n\n\tthis.kernelRadius = 8;\n\tthis.kernelSize = 32;\n\tthis.kernel = [];\n\tthis.noiseTexture = null;\n\tthis.output = 0;\n\n\tthis.minDistance = 0.005;\n\tthis.maxDistance = 0.1;\n\n\tthis._visibilityCache = new Map();\n\n\t//\n\n\tthis.generateSampleKernel();\n\tthis.generateRandomKernelRotations();\n\n\t// beauty render target\n\n\tvar depthTexture = new DepthTexture();\n\tdepthTexture.type = UnsignedShortType;\n\tdepthTexture.minFilter = NearestFilter;\n\tdepthTexture.maxFilter = NearestFilter;\n\n\tthis.beautyRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\tminFilter: LinearFilter,\n\t\tmagFilter: LinearFilter,\n\t\tformat: RGBAFormat\n\t} );\n\n\t// normal render target with depth buffer\n\n\tthis.normalRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\tminFilter: NearestFilter,\n\t\tmagFilter: NearestFilter,\n\t\tformat: RGBAFormat,\n\t\tdepthTexture: depthTexture\n\t} );\n\n\t// ssao render target\n\n\tthis.ssaoRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\tminFilter: LinearFilter,\n\t\tmagFilter: LinearFilter,\n\t\tformat: RGBAFormat\n\t} );\n\n\tthis.blurRenderTarget = this.ssaoRenderTarget.clone();\n\n\t// ssao material\n\n\tif ( SSAOShader === undefined ) {\n\n\t\tconsole.error( 'THREE.SSAOPass: The pass relies on SSAOShader.' );\n\n\t}\n\n\tthis.ssaoMaterial = new ShaderMaterial( {\n\t\tdefines: Object.assign( {}, SSAOShader.defines ),\n\t\tuniforms: UniformsUtils.clone( SSAOShader.uniforms ),\n\t\tvertexShader: SSAOShader.vertexShader,\n\t\tfragmentShader: SSAOShader.fragmentShader,\n\t\tblending: NoBlending\n\t} );\n\n\tthis.ssaoMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\tthis.ssaoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\tthis.ssaoMaterial.uniforms[ 'tDepth' ].value = this.normalRenderTarget.depthTexture;\n\tthis.ssaoMaterial.uniforms[ 'tNoise' ].value = this.noiseTexture;\n\tthis.ssaoMaterial.uniforms[ 'kernel' ].value = this.kernel;\n\tthis.ssaoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\tthis.ssaoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\n\t// normal material\n\n\tthis.normalMaterial = new MeshNormalMaterial();\n\tthis.normalMaterial.blending = NoBlending;\n\n\t// blur material\n\n\tthis.blurMaterial = new ShaderMaterial( {\n\t\tdefines: Object.assign( {}, SSAOBlurShader.defines ),\n\t\tuniforms: UniformsUtils.clone( SSAOBlurShader.uniforms ),\n\t\tvertexShader: SSAOBlurShader.vertexShader,\n\t\tfragmentShader: SSAOBlurShader.fragmentShader\n\t} );\n\tthis.blurMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\n\t// material for rendering the depth\n\n\tthis.depthRenderMaterial = new ShaderMaterial( {\n\t\tdefines: Object.assign( {}, SSAODepthShader.defines ),\n\t\tuniforms: UniformsUtils.clone( SSAODepthShader.uniforms ),\n\t\tvertexShader: SSAODepthShader.vertexShader,\n\t\tfragmentShader: SSAODepthShader.fragmentShader,\n\t\tblending: NoBlending\n\t} );\n\tthis.depthRenderMaterial.uniforms[ 'tDepth' ].value = this.normalRenderTarget.depthTexture;\n\tthis.depthRenderMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\tthis.depthRenderMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\n\t// material for rendering the content of a render target\n\n\tthis.copyMaterial = new ShaderMaterial( {\n\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\tvertexShader: CopyShader.vertexShader,\n\t\tfragmentShader: CopyShader.fragmentShader,\n\t\ttransparent: true,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\tblendSrc: DstColorFactor,\n\t\tblendDst: ZeroFactor,\n\t\tblendEquation: AddEquation,\n\t\tblendSrcAlpha: DstAlphaFactor,\n\t\tblendDstAlpha: ZeroFactor,\n\t\tblendEquationAlpha: AddEquation\n\t} );\n\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\n\n\tthis.originalClearColor = new Color();\n\n};\n\nSSAOPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: SSAOPass,\n\n\tdispose: function () {\n\n\t\t// dispose render targets\n\n\t\tthis.beautyRenderTarget.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\t\tthis.ssaoRenderTarget.dispose();\n\t\tthis.blurRenderTarget.dispose();\n\n\t\t// dispose materials\n\n\t\tthis.normalMaterial.dispose();\n\t\tthis.blurMaterial.dispose();\n\t\tthis.copyMaterial.dispose();\n\t\tthis.depthRenderMaterial.dispose();\n\n\t\t// dipsose full screen quad\n\n\t\tthis.fsQuad.dispose();\n\n\t},\n\n\trender: function ( renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */ ) {\n\n\t\t// render beauty\n\n\t\trenderer.setRenderTarget( this.beautyRenderTarget );\n\t\trenderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n\t\tthis.overrideVisibility();\n\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\t\tthis.restoreVisibility();\n\n\t\t// render SSAO\n\n\t\tthis.ssaoMaterial.uniforms[ 'kernelRadius' ].value = this.kernelRadius;\n\t\tthis.ssaoMaterial.uniforms[ 'minDistance' ].value = this.minDistance;\n\t\tthis.ssaoMaterial.uniforms[ 'maxDistance' ].value = this.maxDistance;\n\t\tthis.renderPass( renderer, this.ssaoMaterial, this.ssaoRenderTarget );\n\n\t\t// render blur\n\n\t\tthis.renderPass( renderer, this.blurMaterial, this.blurRenderTarget );\n\n\t\t// output result to screen\n\n\t\tswitch ( this.output ) {\n\n\t\t\tcase SSAOPass.OUTPUT.SSAO:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Blur:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Beauty:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Depth:\n\n\t\t\t\tthis.renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Normal:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSAOPass.OUTPUT.Default:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = CustomBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.SSAOPass: Unknown output type.' );\n\n\t\t}\n\n\t},\n\n\trenderPass: function ( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\tthis.originalClearColor.copy( renderer.getClearColor() );\n\t\tvar originalClearAlpha = renderer.getClearAlpha();\n\t\tvar originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.fsQuad.material = passMaterial;\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t},\n\n\trenderOverride: function ( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\tthis.originalClearColor.copy( renderer.getClearColor() );\n\t\tvar originalClearAlpha = renderer.getClearAlpha();\n\t\tvar originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\t// restore original state\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.beautyRenderTarget.setSize( width, height );\n\t\tthis.ssaoRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\t\tthis.blurRenderTarget.setSize( width, height );\n\n\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\n\t},\n\n\tgenerateSampleKernel: function () {\n\n\t\tvar kernelSize = this.kernelSize;\n\t\tvar kernel = this.kernel;\n\n\t\tfor ( var i = 0; i < kernelSize; i ++ ) {\n\n\t\t\tvar sample = new Vector3();\n\t\t\tsample.x = ( Math.random() * 2 ) - 1;\n\t\t\tsample.y = ( Math.random() * 2 ) - 1;\n\t\t\tsample.z = Math.random();\n\n\t\t\tsample.normalize();\n\n\t\t\tvar scale = i / kernelSize;\n\t\t\tscale = MathUtils.lerp( 0.1, 1, scale * scale );\n\t\t\tsample.multiplyScalar( scale );\n\n\t\t\tkernel.push( sample );\n\n\t\t}\n\n\t},\n\n\tgenerateRandomKernelRotations: function () {\n\n\t\tvar width = 4, height = 4;\n\n\t\tif ( SimplexNoise === undefined ) {\n\n\t\t\tconsole.error( 'THREE.SSAOPass: The pass relies on SimplexNoise.' );\n\n\t\t}\n\n\t\tvar simplex = new SimplexNoise();\n\n\t\tvar size = width * height;\n\t\tvar data = new Float32Array( size * 4 );\n\n\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\tvar stride = i * 4;\n\n\t\t\tvar x = ( Math.random() * 2 ) - 1;\n\t\t\tvar y = ( Math.random() * 2 ) - 1;\n\t\t\tvar z = 0;\n\n\t\t\tvar noise = simplex.noise3d( x, y, z );\n\n\t\t\tdata[ stride ] = noise;\n\t\t\tdata[ stride + 1 ] = noise;\n\t\t\tdata[ stride + 2 ] = noise;\n\t\t\tdata[ stride + 3 ] = 1;\n\n\t\t}\n\n\t\tthis.noiseTexture = new DataTexture( data, width, height, RGBAFormat, FloatType );\n\t\tthis.noiseTexture.wrapS = RepeatWrapping;\n\t\tthis.noiseTexture.wrapT = RepeatWrapping;\n\n\t},\n\n\toverrideVisibility: function () {\n\n\t\tvar scene = this.scene;\n\t\tvar cache = this._visibilityCache;\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tcache.set( object, object.visible );\n\n\t\t\tif ( object.isPoints || object.isLine ) object.visible = false;\n\n\t\t} );\n\n\t},\n\n\trestoreVisibility: function () {\n\n\t\tvar scene = this.scene;\n\t\tvar cache = this._visibilityCache;\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tvar visible = cache.get( object );\n\t\t\tobject.visible = visible;\n\n\t\t} );\n\n\t\tcache.clear();\n\n\t}\n\n} );\n\nSSAOPass.OUTPUT = {\n\t'Default': 0,\n\t'SSAO': 1,\n\t'Blur': 2,\n\t'Beauty': 3,\n\t'Depth': 4,\n\t'Normal': 5\n};\n\nexport { SSAOPass };\n"]},"metadata":{},"sourceType":"module"}